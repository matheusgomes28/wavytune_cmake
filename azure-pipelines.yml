# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'ubuntu-latest'

name: $(Date:ddMMyyyy)$(Rev:.r)



stages:

- stage: conan_x86_64
  displayName: Conan Dependencies X86_64
  jobs:
  - job: "pullingDependencies"
    container: "mattgomes28/wavytune:compx86_64"
    steps:
    - script: |
        mkdir build && cd build
        conan install -s compiler.libcxx=libstdc++11 --build=missing
    - publish: /conan/
      artifact: conan_deps

- stage: compilationx86_64
  displayName: Compiling For x86_64
  variables:
    BUILD_TYPE: "DEBUG"

  jobs:
  - job: "compile"
    container: "mattgomes28/wavytune:compx86_64"
    steps:
    - download: current
      artifact: conan_deps
    - script: |
        cp -a $(Pipeline.Workspace)/conan_deps/. /conan/
        mkdir build && cd build
        conan install -s compiler.libcxx=libstdc++11 --build=missing ..
        cmake -DCMAKE_MODULE_PATH:FILE_PATH="$(pwd)" ..
        cmake --build .
      displayName: "Building with CMake"

- stage: testx86_64
  displayName: Testing x86_64 build
  jobs:
  - job: "test"
    container: "mattgomes28/wavytune:compx86_64"
    steps:
    - download: current
      artifact: conan_deps
    - script: |
        cp -a $(Pipeline.Workspace)/conan_deps/. /conan/
        mkdir build && cd build
        conan install -s compiler.libcxx=libstdc++11 --build=missing ..
        cmake -DCMAKE_MODULE_PATH:FILE_PATH="$(pwd)" -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_CXX_OUTPUT_EXTENSION_REPLACE="1" ..
        cmake --build . --target all-tests
        ctest
        gcov *.cpp --object-directory coverage_dump/
        gcovr -r .
        echo "Showing the generated shit"
        ls -R
      displayName: Running CTests
